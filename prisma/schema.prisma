// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  role         UserRole    @default(BASE)
  email        String      @unique
  username     String      @unique
  passwordHash String
  pets         Pet[]
  pveBattles   PveBattle[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum UserRole {
  ADMIN
  MEMBER
  BASE
}

model Pet {
  id            Int      @id @default(autoincrement())
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ownerId       Int
  isActive      Boolean  @default(false)
  species       Species  @relation(fields: [speciesId], references: [id], onDelete: Restrict)
  speciesId     Int
  color         Color    @relation(fields: [colorId], references: [id], onDelete: Restrict)
  colorId       Int
  name          String
  health        Int
  mood          Int
  currentHealth Int      @default(0)
  currentMood   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Species {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  colors     Color[]
  baseHealth Int
  baseMood   Int
  pets       Pet[]
  templates  NpcTemplate[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Color {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  pets      Pet[]
  species   Species[]
  templates NpcTemplate[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model NpcTemplate {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  instances   NpcInstance[]
  species     Species       @relation(fields: [speciesId], references: [id], onDelete: Restrict)
  speciesId   Int
  color       Color         @relation(fields: [colorId], references: [id], onDelete: Restrict)
  colorId     Int
  health      Int
  mood        Int
  battlePower Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model NpcInstance {
  id            Int         @id @default(autoincrement())
  name          String
  template      NpcTemplate @relation(fields: [templateId], references: [id], onDelete: Restrict)
  templateId    Int
  health        Int
  mood          Int
  currentHealth Int         @default(0)
  currentMood   Int         @default(0)
  battle        PveBattle?  @relation(fields: [battleId], references: [id], onDelete: SetNull)
  battleId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PveBattle {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  isActive  Boolean       @default(true)
  isVictory Boolean       @default(false)
  opponents NpcInstance[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
